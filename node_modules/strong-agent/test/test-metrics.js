process.env.SL_ENV = process.env.SL_ENV || 'dev';
require('../').profile('deadbeef', 'deadbeef', { quiet: true });

var assert = require('assert');
var http = require('http');
var info = require('../lib/info');
var loop = require('../lib/loop');
var metrics = require('../lib/metrics');
var nf = require('../lib/nodefly');
var proxy = require('../lib/proxy');

proxy.init();
info.init();
metrics.init();
loop.init();

var global_done = [];

// 1. need to hook into the metric function, what a mess frankly
nf.metric = function(scope, name, value, unit, op, persist) {
  metrics.add(scope, name, value, unit, op, persist);
};

// 2. for Connections we need a functioning http server
nf.server_obj = http.createServer(function() {
});

nf.on('metric', function(metric) {
  if (metric.name === 'CPU util stime') {
    assert(metric.value >= 0);
    assert(metric.value <= 100);
  }
  if (metric.name === 'CPU util utime') {
    assert(metric.value >= 0);
    assert(metric.value <= 100);
  }
  if (metric.name === 'Heap Data') {
    assert(Array.isArray(metric.value));
    assert.equal(metric.value, 3);
  }
  if (metric.name === 'GC Full. V8 heap used') {
    assert(metric.value > 0);
  }
  if (metric.name === 'Connections') {
    assert(Array.isArray(metric.value));
    assert.equal(metric.value, 2);
  }
  if (metric.name === 'queue') {
    assert(Array.isArray(metric.value));
    assert.equal(metric.value, 2);
  }
});

if (typeof gc === 'function') {
  gc();
}

setTimeout(function() { /* Do nothing. */ }, 2000);
